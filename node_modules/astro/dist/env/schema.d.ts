import { z } from 'zod';
declare const EnvFieldType: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"string">;
    optional: z.ZodOptional<z.ZodBoolean>;
    default: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "string";
    default?: string | undefined;
    optional?: boolean | undefined;
}, {
    type: "string";
    default?: string | undefined;
    optional?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"number">;
    optional: z.ZodOptional<z.ZodBoolean>;
    default: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "number";
    default?: number | undefined;
    optional?: boolean | undefined;
}, {
    type: "number";
    default?: number | undefined;
    optional?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"boolean">;
    optional: z.ZodOptional<z.ZodBoolean>;
    default: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    type: "boolean";
    default?: boolean | undefined;
    optional?: boolean | undefined;
}, {
    type: "boolean";
    default?: boolean | undefined;
    optional?: boolean | undefined;
}>]>;
export type EnvFieldType = z.infer<typeof EnvFieldType>;
export declare const EnvSchema: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodIntersection<z.ZodUnion<[z.ZodObject<{
    context: z.ZodLiteral<"client">;
    access: z.ZodLiteral<"public">;
}, "strip", z.ZodTypeAny, {
    context: "client";
    access: "public";
}, {
    context: "client";
    access: "public";
}>, z.ZodObject<{
    context: z.ZodLiteral<"server">;
    access: z.ZodLiteral<"public">;
}, "strip", z.ZodTypeAny, {
    context: "server";
    access: "public";
}, {
    context: "server";
    access: "public";
}>, z.ZodObject<{
    context: z.ZodLiteral<"server">;
    access: z.ZodLiteral<"secret">;
}, "strip", z.ZodTypeAny, {
    context: "server";
    access: "secret";
}, {
    context: "server";
    access: "secret";
}>]>, z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"string">;
    optional: z.ZodOptional<z.ZodBoolean>;
    default: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "string";
    default?: string | undefined;
    optional?: boolean | undefined;
}, {
    type: "string";
    default?: string | undefined;
    optional?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"number">;
    optional: z.ZodOptional<z.ZodBoolean>;
    default: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "number";
    default?: number | undefined;
    optional?: boolean | undefined;
}, {
    type: "number";
    default?: number | undefined;
    optional?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"boolean">;
    optional: z.ZodOptional<z.ZodBoolean>;
    default: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    type: "boolean";
    default?: boolean | undefined;
    optional?: boolean | undefined;
}, {
    type: "boolean";
    default?: boolean | undefined;
    optional?: boolean | undefined;
}>]>>>, Record<string, ({
    context: "client";
    access: "public";
} | {
    context: "server";
    access: "public";
} | {
    context: "server";
    access: "secret";
}) & ({
    type: "string";
    default?: string | undefined;
    optional?: boolean | undefined;
} | {
    type: "number";
    default?: number | undefined;
    optional?: boolean | undefined;
} | {
    type: "boolean";
    default?: boolean | undefined;
    optional?: boolean | undefined;
})>, Record<string, ({
    context: "client";
    access: "public";
} | {
    context: "server";
    access: "public";
} | {
    context: "server";
    access: "secret";
}) & ({
    type: "string";
    default?: string | undefined;
    optional?: boolean | undefined;
} | {
    type: "number";
    default?: number | undefined;
    optional?: boolean | undefined;
} | {
    type: "boolean";
    default?: boolean | undefined;
    optional?: boolean | undefined;
})>>;
export type EnvSchema = z.infer<typeof EnvSchema>;
declare const StringField: z.ZodIntersection<z.ZodUnion<[z.ZodObject<{
    context: z.ZodLiteral<"client">;
    access: z.ZodLiteral<"public">;
}, "strip", z.ZodTypeAny, {
    context: "client";
    access: "public";
}, {
    context: "client";
    access: "public";
}>, z.ZodObject<{
    context: z.ZodLiteral<"server">;
    access: z.ZodLiteral<"public">;
}, "strip", z.ZodTypeAny, {
    context: "server";
    access: "public";
}, {
    context: "server";
    access: "public";
}>, z.ZodObject<{
    context: z.ZodLiteral<"server">;
    access: z.ZodLiteral<"secret">;
}, "strip", z.ZodTypeAny, {
    context: "server";
    access: "secret";
}, {
    context: "server";
    access: "secret";
}>]>, z.ZodObject<{
    type: z.ZodLiteral<"string">;
    optional: z.ZodOptional<z.ZodBoolean>;
    default: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "string";
    default?: string | undefined;
    optional?: boolean | undefined;
}, {
    type: "string";
    default?: string | undefined;
    optional?: boolean | undefined;
}>>;
export type StringField = z.infer<typeof StringField>;
export declare const StringFieldInput: z.ZodIntersection<z.ZodUnion<[z.ZodObject<{
    context: z.ZodLiteral<"client">;
    access: z.ZodLiteral<"public">;
}, "strip", z.ZodTypeAny, {
    context: "client";
    access: "public";
}, {
    context: "client";
    access: "public";
}>, z.ZodObject<{
    context: z.ZodLiteral<"server">;
    access: z.ZodLiteral<"public">;
}, "strip", z.ZodTypeAny, {
    context: "server";
    access: "public";
}, {
    context: "server";
    access: "public";
}>, z.ZodObject<{
    context: z.ZodLiteral<"server">;
    access: z.ZodLiteral<"secret">;
}, "strip", z.ZodTypeAny, {
    context: "server";
    access: "secret";
}, {
    context: "server";
    access: "secret";
}>]>, z.ZodObject<Omit<{
    type: z.ZodLiteral<"string">;
    optional: z.ZodOptional<z.ZodBoolean>;
    default: z.ZodOptional<z.ZodString>;
}, "type">, "strip", z.ZodTypeAny, {
    default?: string | undefined;
    optional?: boolean | undefined;
}, {
    default?: string | undefined;
    optional?: boolean | undefined;
}>>;
export type StringFieldInput = z.infer<typeof StringFieldInput>;
declare const NumberField: z.ZodIntersection<z.ZodUnion<[z.ZodObject<{
    context: z.ZodLiteral<"client">;
    access: z.ZodLiteral<"public">;
}, "strip", z.ZodTypeAny, {
    context: "client";
    access: "public";
}, {
    context: "client";
    access: "public";
}>, z.ZodObject<{
    context: z.ZodLiteral<"server">;
    access: z.ZodLiteral<"public">;
}, "strip", z.ZodTypeAny, {
    context: "server";
    access: "public";
}, {
    context: "server";
    access: "public";
}>, z.ZodObject<{
    context: z.ZodLiteral<"server">;
    access: z.ZodLiteral<"secret">;
}, "strip", z.ZodTypeAny, {
    context: "server";
    access: "secret";
}, {
    context: "server";
    access: "secret";
}>]>, z.ZodObject<{
    type: z.ZodLiteral<"number">;
    optional: z.ZodOptional<z.ZodBoolean>;
    default: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "number";
    default?: number | undefined;
    optional?: boolean | undefined;
}, {
    type: "number";
    default?: number | undefined;
    optional?: boolean | undefined;
}>>;
export type NumberField = z.infer<typeof NumberField>;
export declare const NumberFieldInput: z.ZodIntersection<z.ZodUnion<[z.ZodObject<{
    context: z.ZodLiteral<"client">;
    access: z.ZodLiteral<"public">;
}, "strip", z.ZodTypeAny, {
    context: "client";
    access: "public";
}, {
    context: "client";
    access: "public";
}>, z.ZodObject<{
    context: z.ZodLiteral<"server">;
    access: z.ZodLiteral<"public">;
}, "strip", z.ZodTypeAny, {
    context: "server";
    access: "public";
}, {
    context: "server";
    access: "public";
}>, z.ZodObject<{
    context: z.ZodLiteral<"server">;
    access: z.ZodLiteral<"secret">;
}, "strip", z.ZodTypeAny, {
    context: "server";
    access: "secret";
}, {
    context: "server";
    access: "secret";
}>]>, z.ZodObject<Omit<{
    type: z.ZodLiteral<"number">;
    optional: z.ZodOptional<z.ZodBoolean>;
    default: z.ZodOptional<z.ZodNumber>;
}, "type">, "strip", z.ZodTypeAny, {
    default?: number | undefined;
    optional?: boolean | undefined;
}, {
    default?: number | undefined;
    optional?: boolean | undefined;
}>>;
export type NumberFieldInput = z.infer<typeof NumberFieldInput>;
declare const BooleanField: z.ZodIntersection<z.ZodUnion<[z.ZodObject<{
    context: z.ZodLiteral<"client">;
    access: z.ZodLiteral<"public">;
}, "strip", z.ZodTypeAny, {
    context: "client";
    access: "public";
}, {
    context: "client";
    access: "public";
}>, z.ZodObject<{
    context: z.ZodLiteral<"server">;
    access: z.ZodLiteral<"public">;
}, "strip", z.ZodTypeAny, {
    context: "server";
    access: "public";
}, {
    context: "server";
    access: "public";
}>, z.ZodObject<{
    context: z.ZodLiteral<"server">;
    access: z.ZodLiteral<"secret">;
}, "strip", z.ZodTypeAny, {
    context: "server";
    access: "secret";
}, {
    context: "server";
    access: "secret";
}>]>, z.ZodObject<{
    type: z.ZodLiteral<"boolean">;
    optional: z.ZodOptional<z.ZodBoolean>;
    default: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    type: "boolean";
    default?: boolean | undefined;
    optional?: boolean | undefined;
}, {
    type: "boolean";
    default?: boolean | undefined;
    optional?: boolean | undefined;
}>>;
export type BooleanField = z.infer<typeof BooleanField>;
export declare const BooleanFieldInput: z.ZodIntersection<z.ZodUnion<[z.ZodObject<{
    context: z.ZodLiteral<"client">;
    access: z.ZodLiteral<"public">;
}, "strip", z.ZodTypeAny, {
    context: "client";
    access: "public";
}, {
    context: "client";
    access: "public";
}>, z.ZodObject<{
    context: z.ZodLiteral<"server">;
    access: z.ZodLiteral<"public">;
}, "strip", z.ZodTypeAny, {
    context: "server";
    access: "public";
}, {
    context: "server";
    access: "public";
}>, z.ZodObject<{
    context: z.ZodLiteral<"server">;
    access: z.ZodLiteral<"secret">;
}, "strip", z.ZodTypeAny, {
    context: "server";
    access: "secret";
}, {
    context: "server";
    access: "secret";
}>]>, z.ZodObject<Omit<{
    type: z.ZodLiteral<"boolean">;
    optional: z.ZodOptional<z.ZodBoolean>;
    default: z.ZodOptional<z.ZodBoolean>;
}, "type">, "strip", z.ZodTypeAny, {
    default?: boolean | undefined;
    optional?: boolean | undefined;
}, {
    default?: boolean | undefined;
    optional?: boolean | undefined;
}>>;
export type BooleanFieldInput = z.infer<typeof BooleanFieldInput>;
export {};
